%{
	#include<stdio.h>
%}

%token SINGLElINE_COMMENT MULTILINE_COMMENT UNARY REL_OPR LOGICAL_OPR ASSIGN ARRAY IMPORT INTERFACE CLASS NUMERICAL STRING CHAR ACCESS DATATYPE STATIC VOID_TYPE RETURN ELSE_IF IF ELSE NEW MAIN SWITCH CASE DEFAULT BREAK CONTINUE WHILE DO FOR THIS BOOLEAN STRING_FUNCTION MATH_FUNCTION ID FUNCTION SOPLN SOP OPAR CPAR OB CB SEMI BITWISE ENTER ERROR BINARY_OP NUM RELOP STMT

%% 
SS:S {printf("Valid"); exit(0);}
S:IMPORT ENTER S|A
A:CLASS ID ENTER OB B CB
B:ACCESS STATIC VOID_TYPE MAIN OPAR CPAR ENTER OB C CB
B:DATATYPE ID OPAR DATATYPE ID CPAR ENTER OB C CB
C:ENTER SOPLN OPAR STMT CPAR SEMI ENTER C
C:ID ASSIGN X BINARY_OP X SEMI ENTER C
C:ID ASSIGN X SEMI ENTER C
X:NUM
X:ID
C:B
C:DATATYPE ARRAY ASSIGN NEW ARRAY SEMI ENTER C
C:DATATYPE ID SEMI ENTER C
C:FOR OPAR DATATYPE ID ASSIGN X SEMI ID RELOP X SEMI ID UNARY CPAR ENTER OB C CB
C: SEMI ENTER C
C:WHILE OPAR ID RELOP X CPAR ENTER OB C CB
C:WHILE OPAR X CPAR ENTER OB C CB
C:IF OPAR X RELOP X CPAR ENTER OB C CB
C:IF OPAR X RELOP X CPAR ENTER OB C CB D
C:;
D:ELSE OB C CB ENTER C
C:SWITCH OPAR X CPAR ENTER OB E CB
E:CASE NUM ':' C BREAK SEMI ENTER E
E:CASE CHAR ':' C BREAK SEMI ENTER E
E:DEFAULT ':' C SEMI ENTER C
C: ID ASSIGN ID OPAR X CPAR SEMI ENTER C
C: ID OPAR X CPAR SEMI ENTER C
%%
int main()
{
printf("ENTER CODE \n");
yyparse();
}
yyerror()
{
printf("INVALID");
}